/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.myDsl.Recipe
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.xtext.example.mydsl.myDsl.RecipeManager

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {

	@Check
	def recipeManagerExists(RecipeManager recipeManager) {
		if (recipeManager === null) {
			error("Please add a recipe manager, by starting with an author!", 
          			MyDslPackage.Literals.RECIPE__AUTHOR);
		}
	}

	@Check
	def recipeWithAuthorExists(Recipe recipe) {
		if (recipe.author === null) {
			error("Please add an author!", 
          			MyDslPackage.Literals.RECIPE__AUTHOR);
		}
	}

	@Check
	def recipeExists(Recipe recipe) {
		if (recipe === null) {
			error("Please add a recipe!", 
          			MyDslPackage.Literals.RECIPE__NAME);
		}
	}
	
	@Check
	def NoSelfRating(Recipe recipe) {
    	var ratings = recipe.ratings;
    	for (var i = 0; i < ratings.length; i++) {
      		if (ratings.get(i).getAuthor().equals(recipe.getAuthor())) {
        		error("Self rating is not allowed!", 
          			MyDslPackage.Literals.RECIPE__RATINGS, i);
          	}
      }
   }
   
   @Check
   def onlyOneRatingPerRecipeByAuthor(Recipe recipe) {
   		var ratings = recipe.ratings;
   		for (var i = 0; i < ratings.length; i++) {
   			var author1 = ratings.get(i).getAuthor();
   			for (var j = i+1; i < ratings.length; i++) {
   				var author2 = ratings.get(j).getAuthor();
   				if (author1.equals(author2))
   					error("You can only make one rating per recipe!", 
          			MyDslPackage.Literals.RECIPE__RATINGS, j);
   			}
   		}
   }
   
   @Check
	def recipeNotContainingItSelf(Recipe recipe) {
		var recipeName = recipe.name;
		var ingredients = recipe.ingredient;
		for (var i = 0; i < ingredients.length; i++) {
			var ingredient = ingredients.get(i);
			if (ingredient.name === null) {
				// we've got a recipe
				var ingredientName = ingredient.recipe.name;
				if (recipeName.equals(ingredientName)) {
					error("A recipe must not contain itself!", 
	          			MyDslPackage.Literals.RECIPE__INGREDIENT, i);
				}
			}
		}
	}
   
   @Check
   def recipeHasAuthor(Recipe recipe) {
   		if (recipe.author === null) {
   			error("Every recipe must have an author!", 
	          			MyDslPackage.Literals.RECIPE__AUTHOR);
	 	}
   }
   
   @Check
   def recipeHasIngredient(Recipe recipe) {
   		if (recipe.ingredient === null) {
   			error("Every recipe must have an ingredient!", 
	          			MyDslPackage.Literals.RECIPE__INGREDIENT);
	 	}
   }
   
   @Check
   def recipeIsIngredientOfRecipe(Recipe recipe) {
   		var ingredients = recipe.ingredient;
   		// if there exists only one ingredient
   		if (ingredients.length == 1) {
   			var ingredientName = ingredients.get(0).name;
   			// if it is a recipe, name is null
   			if (ingredientName === null) {
   				error("A recipe must not copy another recipe! Please add a second ingredient", 
          			MyDslPackage.Literals.RECIPE__INGREDIENT);
   			}
   		}
   }
   
	@Check
	def veganRecipeHasVegetaricIngredient(Recipe recipe) {
		if (recipe.vegan == "Vegan") {
			var ingredients = recipe.ingredient;
			for (var i = 0; i < ingredients.length; i++) {
				var ingredient = ingredients.get(i);
	   			var veganismLevel = ingredient.veganismLevel;
	   			if (veganismLevel.equals("Vegatric")) {
	   				error("A vegan recipe cannot contain a non-vegetaric ingredient!", 
	          			MyDslPackage.Literals.RECIPE__INGREDIENT, i);
	   			}
   			}
		}
	}

	@Check
	def veganRecipeHasCanivorousRecipe(Recipe recipe) {
		if (recipe.vegan == "Vegan") {
			var ingredients = recipe.ingredient;
			for (var i = 0; i < ingredients.length; i++) {
				var ingredient = ingredients.get(i);
	   			var veganismLevel = ingredient.veganismLevel;
	   			if (veganismLevel === null) {
	   				// Assume that ingredient is recipe, therefore check
	   				try {
	   					veganismLevel = ingredient.recipe.vegan;
	   				} catch (Error e) {
	   					// Obviously something went wrong
	   				}
	   			} else {
	   				veganismLevel = "Vegan";
	   			}
	   			if (veganismLevel.equals("Canivorous")) {
	   				error("A vegan recipe cannot contain a canivorous ingredient!", 
	          			MyDslPackage.Literals.RECIPE__INGREDIENT, i);
	   			}
   			}
		}
	}

	@Check
	def veganRecipeHasVegetaricRecipe(Recipe recipe) {
		if (recipe.vegan == "Vegan") {
			var ingredients = recipe.ingredient;
			for (var i = 0; i < ingredients.length; i++) {
				var ingredient = ingredients.get(i);
	   			var veganismLevel = ingredient.veganismLevel;
	   			if (veganismLevel === null) {
	   				// Assume that ingredient is recipe, therefore check
	   				try {
	   					veganismLevel = ingredient.recipe.vegan;
	   				} catch (Error e) {
	   					// Obviously something went wrong
	   				}
	   			} else {
	   				veganismLevel = "Vegan";
	   			}
	   			if (veganismLevel.equals("Vegetaric")) {
	   				error("A vegan recipe cannot contain a vegetaric recipe!", 
	          			MyDslPackage.Literals.RECIPE__INGREDIENT, i);
	   			}
   			}
		}
	}
	
	@Check
	def vegetaricRecipeHasCanivorousRecipe(Recipe recipe) {
		if (recipe.vegan == "Vegetaric") {
			var ingredients = recipe.ingredient;
			for (var i = 0; i < ingredients.length; i++) {
				var ingredient = ingredients.get(i);
	   			var veganismLevel = ingredient.veganismLevel;
	   			if (veganismLevel === null) {
	   				// Assume that ingredient is recipe, therefore check
	   				try {
	   					veganismLevel = ingredient.recipe.vegan;
	   				} catch (Error e) {
	   					// Obviously something went wrong
	   				}
	   			} else {
	   				veganismLevel = "Vegetaric";
	   			}
	   			if (veganismLevel.equals("Canivorous")) {
	   				error("A vegetaric recipe cannot contain canivorous recipe!", 
	          			MyDslPackage.Literals.RECIPE__INGREDIENT, i);
	   			}
   			}
		}
	}
	
	@Check
	def vegetaricRecipeHasCanivorousIngredient(Recipe recipe) {
		if (recipe.vegan == "Vegetaric") {
			var ingredients = recipe.ingredient;
			for (var i = 0; i < ingredients.length; i++) {
				var ingredient = ingredients.get(i);
	   			var veganismLevel = ingredient.veganismLevel;
	   			if (veganismLevel.equals("Canivorous")) {
	   				error("A vegetaric recipe cannot contain a canivorous ingredient!", 
	          			MyDslPackage.Literals.RECIPE__INGREDIENT, i);
	   			}
   			}
		}
	}
}
