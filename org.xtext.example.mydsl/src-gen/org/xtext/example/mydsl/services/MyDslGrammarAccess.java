/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RecipeManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RecipeManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAuthorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuthorsAuthorParserRuleCall_2_0 = (RuleCall)cAuthorsAssignment_2.eContents().get(0);
		private final Assignment cAuthorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAuthorsAuthorParserRuleCall_3_0 = (RuleCall)cAuthorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRecipesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cRecipesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cRecipesRecipeParserRuleCall_4_2_0 = (RuleCall)cRecipesAssignment_4_2.eContents().get(0);
		private final Assignment cRecipesAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cRecipesRecipeParserRuleCall_4_3_0 = (RuleCall)cRecipesAssignment_4_3.eContents().get(0);
		
		//RecipeManager:
		//	'authors' EOL authors+=Author authors+=Author* ('recipes' EOL recipes+=Recipe recipes+=Recipe*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'authors' EOL authors+=Author authors+=Author* ('recipes' EOL recipes+=Recipe recipes+=Recipe*)?
		public Group getGroup() { return cGroup; }
		
		//'authors'
		public Keyword getAuthorsKeyword_0() { return cAuthorsKeyword_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_1() { return cEOLParserRuleCall_1; }
		
		//authors+=Author
		public Assignment getAuthorsAssignment_2() { return cAuthorsAssignment_2; }
		
		//Author
		public RuleCall getAuthorsAuthorParserRuleCall_2_0() { return cAuthorsAuthorParserRuleCall_2_0; }
		
		//authors+=Author*
		public Assignment getAuthorsAssignment_3() { return cAuthorsAssignment_3; }
		
		//Author
		public RuleCall getAuthorsAuthorParserRuleCall_3_0() { return cAuthorsAuthorParserRuleCall_3_0; }
		
		//('recipes' EOL recipes+=Recipe recipes+=Recipe*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'recipes'
		public Keyword getRecipesKeyword_4_0() { return cRecipesKeyword_4_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_4_1() { return cEOLParserRuleCall_4_1; }
		
		//recipes+=Recipe
		public Assignment getRecipesAssignment_4_2() { return cRecipesAssignment_4_2; }
		
		//Recipe
		public RuleCall getRecipesRecipeParserRuleCall_4_2_0() { return cRecipesRecipeParserRuleCall_4_2_0; }
		
		//recipes+=Recipe*
		public Assignment getRecipesAssignment_4_3() { return cRecipesAssignment_4_3; }
		
		//Recipe
		public RuleCall getRecipesRecipeParserRuleCall_4_3_0() { return cRecipesRecipeParserRuleCall_4_3_0; }
	}
	public class AuthorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Author");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cEmailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEmailSTRINGTerminalRuleCall_1_0 = (RuleCall)cEmailAssignment_1.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Author:
		//	name=ID Email=STRING EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID Email=STRING EOL
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//Email=STRING
		public Assignment getEmailAssignment_1() { return cEmailAssignment_1; }
		
		//STRING
		public RuleCall getEmailSTRINGTerminalRuleCall_1_0() { return cEmailSTRINGTerminalRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_2() { return cEOLParserRuleCall_2; }
	}
	public class RatingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rating");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStarsINTTerminalRuleCall_0_0 = (RuleCall)cStarsAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSTRINGTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		private final Keyword cVonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAuthorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAuthorAuthorCrossReference_4_0 = (CrossReference)cAuthorAssignment_4.eContents().get(0);
		private final RuleCall cAuthorAuthorIDTerminalRuleCall_4_0_1 = (RuleCall)cAuthorAuthorCrossReference_4_0.eContents().get(1);
		
		//Rating:
		//	stars=INT ',' comment=STRING 'von' author=[Author];
		@Override public ParserRule getRule() { return rule; }
		
		//stars=INT ',' comment=STRING 'von' author=[Author]
		public Group getGroup() { return cGroup; }
		
		//stars=INT
		public Assignment getStarsAssignment_0() { return cStarsAssignment_0; }
		
		//INT
		public RuleCall getStarsINTTerminalRuleCall_0_0() { return cStarsINTTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//comment=STRING
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_2_0() { return cCommentSTRINGTerminalRuleCall_2_0; }
		
		//'von'
		public Keyword getVonKeyword_3() { return cVonKeyword_3; }
		
		//author=[Author]
		public Assignment getAuthorAssignment_4() { return cAuthorAssignment_4; }
		
		//[Author]
		public CrossReference getAuthorAuthorCrossReference_4_0() { return cAuthorAuthorCrossReference_4_0; }
		
		//ID
		public RuleCall getAuthorAuthorIDTerminalRuleCall_4_0_1() { return cAuthorAuthorIDTerminalRuleCall_4_0_1; }
	}
	public class RecipeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Recipe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cVonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAuthorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAuthorAuthorCrossReference_2_0 = (CrossReference)cAuthorAssignment_2.eContents().get(0);
		private final RuleCall cAuthorAuthorIDTerminalRuleCall_2_0_1 = (RuleCall)cAuthorAuthorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVeganAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVeganVeganismLevelParserRuleCall_4_0 = (RuleCall)cVeganAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDurationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDurationINTTerminalRuleCall_6_0 = (RuleCall)cDurationAssignment_6.eContents().get(0);
		private final Keyword cMinKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDifficultyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDifficultyDifficultyLevelParserRuleCall_9_0 = (RuleCall)cDifficultyAssignment_9.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Keyword cKitchenUtensilsKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cEOLParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Assignment cKitchenUtensilsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cKitchenUtensilsKitchenUtensilParserRuleCall_13_0 = (RuleCall)cKitchenUtensilsAssignment_13.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Assignment cKitchenUtensilsAssignment_15_0 = (Assignment)cGroup_15.eContents().get(0);
		private final RuleCall cKitchenUtensilsKitchenUtensilParserRuleCall_15_0_0 = (RuleCall)cKitchenUtensilsAssignment_15_0.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_15_1 = (RuleCall)cGroup_15.eContents().get(1);
		private final Keyword cFoodCategoriesKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final RuleCall cEOLParserRuleCall_17 = (RuleCall)cGroup.eContents().get(17);
		private final Assignment cFoodCategoryAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cFoodCategoryFoodCategoryParserRuleCall_18_0 = (RuleCall)cFoodCategoryAssignment_18.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_19 = (RuleCall)cGroup.eContents().get(19);
		private final Group cGroup_20 = (Group)cGroup.eContents().get(20);
		private final Assignment cFoodCategoryAssignment_20_0 = (Assignment)cGroup_20.eContents().get(0);
		private final RuleCall cFoodCategoryFoodCategoryParserRuleCall_20_0_0 = (RuleCall)cFoodCategoryAssignment_20_0.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_20_1 = (RuleCall)cGroup_20.eContents().get(1);
		private final Keyword cIngredientsKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final RuleCall cEOLParserRuleCall_22 = (RuleCall)cGroup.eContents().get(22);
		private final Keyword cHyphenMinusSpaceKeyword_23 = (Keyword)cGroup.eContents().get(23);
		private final Assignment cIngredientAssignment_24 = (Assignment)cGroup.eContents().get(24);
		private final RuleCall cIngredientIngredientParserRuleCall_24_0 = (RuleCall)cIngredientAssignment_24.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_25 = (RuleCall)cGroup.eContents().get(25);
		private final Group cGroup_26 = (Group)cGroup.eContents().get(26);
		private final Keyword cHyphenMinusSpaceKeyword_26_0 = (Keyword)cGroup_26.eContents().get(0);
		private final Assignment cIngredientAssignment_26_1 = (Assignment)cGroup_26.eContents().get(1);
		private final RuleCall cIngredientIngredientParserRuleCall_26_1_0 = (RuleCall)cIngredientAssignment_26_1.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_26_2 = (RuleCall)cGroup_26.eContents().get(2);
		private final Keyword cRatingsKeyword_27 = (Keyword)cGroup.eContents().get(27);
		private final RuleCall cEOLParserRuleCall_28 = (RuleCall)cGroup.eContents().get(28);
		private final Assignment cRatingsAssignment_29 = (Assignment)cGroup.eContents().get(29);
		private final RuleCall cRatingsRatingParserRuleCall_29_0 = (RuleCall)cRatingsAssignment_29.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_30 = (RuleCall)cGroup.eContents().get(30);
		private final Group cGroup_31 = (Group)cGroup.eContents().get(31);
		private final Assignment cRatingsAssignment_31_0 = (Assignment)cGroup_31.eContents().get(0);
		private final RuleCall cRatingsRatingParserRuleCall_31_0_0 = (RuleCall)cRatingsAssignment_31_0.eContents().get(0);
		private final RuleCall cEOLParserRuleCall_31_1 = (RuleCall)cGroup_31.eContents().get(1);
		
		//Recipe:
		//	name=ID 'von' author=[Author] ',' vegan=VeganismLevel ',' duration=INT 'min' ',' difficulty=DifficultyLevel EOL
		//	'Kitchen Utensils' EOL kitchenUtensils+=KitchenUtensil EOL (kitchenUtensils+=KitchenUtensil EOL)*
		//	'Food Categories' EOL foodCategory+=FoodCategory EOL (foodCategory+=FoodCategory EOL)*
		//	'Ingredients' EOL '- ' ingredient+=Ingredient EOL ('- ' ingredient+=Ingredient EOL)*
		//	'Ratings' EOL ratings+=Rating EOL (ratings+=Rating EOL)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'von' author=[Author] ',' vegan=VeganismLevel ',' duration=INT 'min' ',' difficulty=DifficultyLevel EOL
		//'Kitchen Utensils' EOL kitchenUtensils+=KitchenUtensil EOL (kitchenUtensils+=KitchenUtensil EOL)* 'Food Categories'
		//EOL foodCategory+=FoodCategory EOL (foodCategory+=FoodCategory EOL)* 'Ingredients' EOL '- ' ingredient+=Ingredient EOL
		//('- ' ingredient+=Ingredient EOL)* 'Ratings' EOL ratings+=Rating EOL (ratings+=Rating EOL)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'von'
		public Keyword getVonKeyword_1() { return cVonKeyword_1; }
		
		//author=[Author]
		public Assignment getAuthorAssignment_2() { return cAuthorAssignment_2; }
		
		//[Author]
		public CrossReference getAuthorAuthorCrossReference_2_0() { return cAuthorAuthorCrossReference_2_0; }
		
		//ID
		public RuleCall getAuthorAuthorIDTerminalRuleCall_2_0_1() { return cAuthorAuthorIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//vegan=VeganismLevel
		public Assignment getVeganAssignment_4() { return cVeganAssignment_4; }
		
		//VeganismLevel
		public RuleCall getVeganVeganismLevelParserRuleCall_4_0() { return cVeganVeganismLevelParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//duration=INT
		public Assignment getDurationAssignment_6() { return cDurationAssignment_6; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_6_0() { return cDurationINTTerminalRuleCall_6_0; }
		
		//'min'
		public Keyword getMinKeyword_7() { return cMinKeyword_7; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//difficulty=DifficultyLevel
		public Assignment getDifficultyAssignment_9() { return cDifficultyAssignment_9; }
		
		//DifficultyLevel
		public RuleCall getDifficultyDifficultyLevelParserRuleCall_9_0() { return cDifficultyDifficultyLevelParserRuleCall_9_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_10() { return cEOLParserRuleCall_10; }
		
		//'Kitchen Utensils'
		public Keyword getKitchenUtensilsKeyword_11() { return cKitchenUtensilsKeyword_11; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_12() { return cEOLParserRuleCall_12; }
		
		//kitchenUtensils+=KitchenUtensil
		public Assignment getKitchenUtensilsAssignment_13() { return cKitchenUtensilsAssignment_13; }
		
		//KitchenUtensil
		public RuleCall getKitchenUtensilsKitchenUtensilParserRuleCall_13_0() { return cKitchenUtensilsKitchenUtensilParserRuleCall_13_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_14() { return cEOLParserRuleCall_14; }
		
		//(kitchenUtensils+=KitchenUtensil EOL)*
		public Group getGroup_15() { return cGroup_15; }
		
		//kitchenUtensils+=KitchenUtensil
		public Assignment getKitchenUtensilsAssignment_15_0() { return cKitchenUtensilsAssignment_15_0; }
		
		//KitchenUtensil
		public RuleCall getKitchenUtensilsKitchenUtensilParserRuleCall_15_0_0() { return cKitchenUtensilsKitchenUtensilParserRuleCall_15_0_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_15_1() { return cEOLParserRuleCall_15_1; }
		
		//'Food Categories'
		public Keyword getFoodCategoriesKeyword_16() { return cFoodCategoriesKeyword_16; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_17() { return cEOLParserRuleCall_17; }
		
		//foodCategory+=FoodCategory
		public Assignment getFoodCategoryAssignment_18() { return cFoodCategoryAssignment_18; }
		
		//FoodCategory
		public RuleCall getFoodCategoryFoodCategoryParserRuleCall_18_0() { return cFoodCategoryFoodCategoryParserRuleCall_18_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_19() { return cEOLParserRuleCall_19; }
		
		//(foodCategory+=FoodCategory EOL)*
		public Group getGroup_20() { return cGroup_20; }
		
		//foodCategory+=FoodCategory
		public Assignment getFoodCategoryAssignment_20_0() { return cFoodCategoryAssignment_20_0; }
		
		//FoodCategory
		public RuleCall getFoodCategoryFoodCategoryParserRuleCall_20_0_0() { return cFoodCategoryFoodCategoryParserRuleCall_20_0_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_20_1() { return cEOLParserRuleCall_20_1; }
		
		//'Ingredients'
		public Keyword getIngredientsKeyword_21() { return cIngredientsKeyword_21; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_22() { return cEOLParserRuleCall_22; }
		
		//'- '
		public Keyword getHyphenMinusSpaceKeyword_23() { return cHyphenMinusSpaceKeyword_23; }
		
		//ingredient+=Ingredient
		public Assignment getIngredientAssignment_24() { return cIngredientAssignment_24; }
		
		//Ingredient
		public RuleCall getIngredientIngredientParserRuleCall_24_0() { return cIngredientIngredientParserRuleCall_24_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_25() { return cEOLParserRuleCall_25; }
		
		//('- ' ingredient+=Ingredient EOL)*
		public Group getGroup_26() { return cGroup_26; }
		
		//'- '
		public Keyword getHyphenMinusSpaceKeyword_26_0() { return cHyphenMinusSpaceKeyword_26_0; }
		
		//ingredient+=Ingredient
		public Assignment getIngredientAssignment_26_1() { return cIngredientAssignment_26_1; }
		
		//Ingredient
		public RuleCall getIngredientIngredientParserRuleCall_26_1_0() { return cIngredientIngredientParserRuleCall_26_1_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_26_2() { return cEOLParserRuleCall_26_2; }
		
		//'Ratings'
		public Keyword getRatingsKeyword_27() { return cRatingsKeyword_27; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_28() { return cEOLParserRuleCall_28; }
		
		//ratings+=Rating
		public Assignment getRatingsAssignment_29() { return cRatingsAssignment_29; }
		
		//Rating
		public RuleCall getRatingsRatingParserRuleCall_29_0() { return cRatingsRatingParserRuleCall_29_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_30() { return cEOLParserRuleCall_30; }
		
		//(ratings+=Rating EOL)*
		public Group getGroup_31() { return cGroup_31; }
		
		//ratings+=Rating
		public Assignment getRatingsAssignment_31_0() { return cRatingsAssignment_31_0; }
		
		//Rating
		public RuleCall getRatingsRatingParserRuleCall_31_0_0() { return cRatingsRatingParserRuleCall_31_0_0; }
		
		//EOL
		public RuleCall getEOLParserRuleCall_31_1() { return cEOLParserRuleCall_31_1; }
	}
	public class KitchenUtensilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.KitchenUtensil");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameFurnaceKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameStovetopKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameRollingPinKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//KitchenUtensil:
		//	name=(STRING | 'furnace' | 'stovetop' | 'rolling pin');
		@Override public ParserRule getRule() { return rule; }
		
		//name=(STRING | 'furnace' | 'stovetop' | 'rolling pin')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(STRING | 'furnace' | 'stovetop' | 'rolling pin')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//'furnace'
		public Keyword getNameFurnaceKeyword_0_1() { return cNameFurnaceKeyword_0_1; }
		
		//'stovetop'
		public Keyword getNameStovetopKeyword_0_2() { return cNameStovetopKeyword_0_2; }
		
		//'rolling pin'
		public Keyword getNameRollingPinKeyword_0_3() { return cNameRollingPinKeyword_0_3; }
	}
	public class DifficultyLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DifficultyLevel");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameEasyKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameMediumKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameHardKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		
		//DifficultyLevel:
		//	name=('easy' | 'medium' | 'hard');
		@Override public ParserRule getRule() { return rule; }
		
		//name=('easy' | 'medium' | 'hard')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('easy' | 'medium' | 'hard')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'easy'
		public Keyword getNameEasyKeyword_0_0() { return cNameEasyKeyword_0_0; }
		
		//'medium'
		public Keyword getNameMediumKeyword_0_1() { return cNameMediumKeyword_0_1; }
		
		//'hard'
		public Keyword getNameHardKeyword_0_2() { return cNameHardKeyword_0_2; }
	}
	public class FoodCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FoodCategory");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FoodCategory:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class IngredientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Ingredient");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cAmountAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAmountINTTerminalRuleCall_0_1_0 = (RuleCall)cAmountAssignment_0_1.eContents().get(0);
		private final Assignment cUnitAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cUnitUnitParserRuleCall_0_2_0 = (RuleCall)cUnitAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cVeganismLevelAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cVeganismLevelVeganismLevelParserRuleCall_0_4_0 = (RuleCall)cVeganismLevelAssignment_0_4.eContents().get(0);
		private final Assignment cRecipeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRecipeRecipeCrossReference_1_0 = (CrossReference)cRecipeAssignment_1.eContents().get(0);
		private final RuleCall cRecipeRecipeIDTerminalRuleCall_1_0_1 = (RuleCall)cRecipeRecipeCrossReference_1_0.eContents().get(1);
		
		//Ingredient:
		//	name=STRING amount=INT unit=Unit ',' veganismLevel=VeganismLevel | recipe=[Recipe];
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING amount=INT unit=Unit ',' veganismLevel=VeganismLevel | recipe=[Recipe]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=STRING amount=INT unit=Unit ',' veganismLevel=VeganismLevel
		public Group getGroup_0() { return cGroup_0; }
		
		//name=STRING
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0_0() { return cNameSTRINGTerminalRuleCall_0_0_0; }
		
		//amount=INT
		public Assignment getAmountAssignment_0_1() { return cAmountAssignment_0_1; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_0_1_0() { return cAmountINTTerminalRuleCall_0_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_0_2() { return cUnitAssignment_0_2; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_0_2_0() { return cUnitUnitParserRuleCall_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//veganismLevel=VeganismLevel
		public Assignment getVeganismLevelAssignment_0_4() { return cVeganismLevelAssignment_0_4; }
		
		//VeganismLevel
		public RuleCall getVeganismLevelVeganismLevelParserRuleCall_0_4_0() { return cVeganismLevelVeganismLevelParserRuleCall_0_4_0; }
		
		//recipe=[Recipe]
		public Assignment getRecipeAssignment_1() { return cRecipeAssignment_1; }
		
		//[Recipe]
		public CrossReference getRecipeRecipeCrossReference_1_0() { return cRecipeRecipeCrossReference_1_0; }
		
		//ID
		public RuleCall getRecipeRecipeIDTerminalRuleCall_1_0_1() { return cRecipeRecipeIDTerminalRuleCall_1_0_1; }
	}
	public class VeganismLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VeganismLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVeganKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVegetaricKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCarnivorousKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VeganismLevel:
		//	'Vegan' | 'Vegetaric' | 'Carnivorous';
		@Override public ParserRule getRule() { return rule; }
		
		//'Vegan' | 'Vegetaric' | 'Carnivorous'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Vegan'
		public Keyword getVeganKeyword_0() { return cVeganKeyword_0; }
		
		//'Vegetaric'
		public Keyword getVegetaricKeyword_1() { return cVegetaricKeyword_1; }
		
		//'Carnivorous'
		public Keyword getCarnivorousKeyword_2() { return cCarnivorousKeyword_2; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMlKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cKgKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTspKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMgKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTbspKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPcsKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Unit:
		//	'ml' | 'l' | 'g' | 'kg' | 'tsp' | 'mg' | 'tbsp' | 'pcs';
		@Override public ParserRule getRule() { return rule; }
		
		//'ml' | 'l' | 'g' | 'kg' | 'tsp' | 'mg' | 'tbsp' | 'pcs'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ml'
		public Keyword getMlKeyword_0() { return cMlKeyword_0; }
		
		//'l'
		public Keyword getLKeyword_1() { return cLKeyword_1; }
		
		//'g'
		public Keyword getGKeyword_2() { return cGKeyword_2; }
		
		//'kg'
		public Keyword getKgKeyword_3() { return cKgKeyword_3; }
		
		//'tsp'
		public Keyword getTspKeyword_4() { return cTspKeyword_4; }
		
		//'mg'
		public Keyword getMgKeyword_5() { return cMgKeyword_5; }
		
		//'tbsp'
		public Keyword getTbspKeyword_6() { return cTbspKeyword_6; }
		
		//'pcs'
		public Keyword getPcsKeyword_7() { return cPcsKeyword_7; }
	}
	public class EOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EOL:
		//	NEWLINE | SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//NEWLINE | SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }
	}
	
	
	private final RecipeManagerElements pRecipeManager;
	private final AuthorElements pAuthor;
	private final RatingElements pRating;
	private final RecipeElements pRecipe;
	private final KitchenUtensilElements pKitchenUtensil;
	private final DifficultyLevelElements pDifficultyLevel;
	private final FoodCategoryElements pFoodCategory;
	private final IngredientElements pIngredient;
	private final VeganismLevelElements pVeganismLevel;
	private final UnitElements pUnit;
	private final EOLElements pEOL;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tNEWLINE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRecipeManager = new RecipeManagerElements();
		this.pAuthor = new AuthorElements();
		this.pRating = new RatingElements();
		this.pRecipe = new RecipeElements();
		this.pKitchenUtensil = new KitchenUtensilElements();
		this.pDifficultyLevel = new DifficultyLevelElements();
		this.pFoodCategory = new FoodCategoryElements();
		this.pIngredient = new IngredientElements();
		this.pVeganismLevel = new VeganismLevelElements();
		this.pUnit = new UnitElements();
		this.pEOL = new EOLElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SL_COMMENT");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NEWLINE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RecipeManager:
	//	'authors' EOL authors+=Author authors+=Author* ('recipes' EOL recipes+=Recipe recipes+=Recipe*)?;
	public RecipeManagerElements getRecipeManagerAccess() {
		return pRecipeManager;
	}
	
	public ParserRule getRecipeManagerRule() {
		return getRecipeManagerAccess().getRule();
	}
	
	//Author:
	//	name=ID Email=STRING EOL;
	public AuthorElements getAuthorAccess() {
		return pAuthor;
	}
	
	public ParserRule getAuthorRule() {
		return getAuthorAccess().getRule();
	}
	
	//Rating:
	//	stars=INT ',' comment=STRING 'von' author=[Author];
	public RatingElements getRatingAccess() {
		return pRating;
	}
	
	public ParserRule getRatingRule() {
		return getRatingAccess().getRule();
	}
	
	//Recipe:
	//	name=ID 'von' author=[Author] ',' vegan=VeganismLevel ',' duration=INT 'min' ',' difficulty=DifficultyLevel EOL
	//	'Kitchen Utensils' EOL kitchenUtensils+=KitchenUtensil EOL (kitchenUtensils+=KitchenUtensil EOL)*
	//	'Food Categories' EOL foodCategory+=FoodCategory EOL (foodCategory+=FoodCategory EOL)*
	//	'Ingredients' EOL '- ' ingredient+=Ingredient EOL ('- ' ingredient+=Ingredient EOL)*
	//	'Ratings' EOL ratings+=Rating EOL (ratings+=Rating EOL)*;
	public RecipeElements getRecipeAccess() {
		return pRecipe;
	}
	
	public ParserRule getRecipeRule() {
		return getRecipeAccess().getRule();
	}
	
	//KitchenUtensil:
	//	name=(STRING | 'furnace' | 'stovetop' | 'rolling pin');
	public KitchenUtensilElements getKitchenUtensilAccess() {
		return pKitchenUtensil;
	}
	
	public ParserRule getKitchenUtensilRule() {
		return getKitchenUtensilAccess().getRule();
	}
	
	//DifficultyLevel:
	//	name=('easy' | 'medium' | 'hard');
	public DifficultyLevelElements getDifficultyLevelAccess() {
		return pDifficultyLevel;
	}
	
	public ParserRule getDifficultyLevelRule() {
		return getDifficultyLevelAccess().getRule();
	}
	
	//FoodCategory:
	//	name=STRING;
	public FoodCategoryElements getFoodCategoryAccess() {
		return pFoodCategory;
	}
	
	public ParserRule getFoodCategoryRule() {
		return getFoodCategoryAccess().getRule();
	}
	
	//Ingredient:
	//	name=STRING amount=INT unit=Unit ',' veganismLevel=VeganismLevel | recipe=[Recipe];
	public IngredientElements getIngredientAccess() {
		return pIngredient;
	}
	
	public ParserRule getIngredientRule() {
		return getIngredientAccess().getRule();
	}
	
	//VeganismLevel:
	//	'Vegan' | 'Vegetaric' | 'Carnivorous';
	public VeganismLevelElements getVeganismLevelAccess() {
		return pVeganismLevel;
	}
	
	public ParserRule getVeganismLevelRule() {
		return getVeganismLevelAccess().getRule();
	}
	
	//Unit:
	//	'ml' | 'l' | 'g' | 'kg' | 'tsp' | 'mg' | 'tbsp' | 'pcs';
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//EOL:
	//	NEWLINE | SL_COMMENT;
	public EOLElements getEOLAccess() {
		return pEOL;
	}
	
	public ParserRule getEOLRule() {
		return getEOLAccess().getRule();
	}
	
	//@ Override terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal NEWLINE:
	//	'\r'? '\n';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
