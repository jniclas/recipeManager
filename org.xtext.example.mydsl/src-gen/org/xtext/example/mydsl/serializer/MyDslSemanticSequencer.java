/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Author;
import org.xtext.example.mydsl.myDsl.Authorblock;
import org.xtext.example.mydsl.myDsl.FoodCategory;
import org.xtext.example.mydsl.myDsl.Ingridient;
import org.xtext.example.mydsl.myDsl.KitchenUtensil;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Rating;
import org.xtext.example.mydsl.myDsl.Recipe;
import org.xtext.example.mydsl.myDsl.RecipeManager;
import org.xtext.example.mydsl.myDsl.Recipeblock;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.AUTHOR:
				sequence_Author(context, (Author) semanticObject); 
				return; 
			case MyDslPackage.AUTHORBLOCK:
				sequence_Authorblock(context, (Authorblock) semanticObject); 
				return; 
			case MyDslPackage.FOOD_CATEGORY:
				sequence_FoodCategory(context, (FoodCategory) semanticObject); 
				return; 
			case MyDslPackage.INGRIDIENT:
				sequence_Ingridient(context, (Ingridient) semanticObject); 
				return; 
			case MyDslPackage.KITCHEN_UTENSIL:
				sequence_KitchenUtensil(context, (KitchenUtensil) semanticObject); 
				return; 
			case MyDslPackage.RATING:
				sequence_Rating(context, (Rating) semanticObject); 
				return; 
			case MyDslPackage.RECIPE:
				sequence_Recipe(context, (Recipe) semanticObject); 
				return; 
			case MyDslPackage.RECIPE_MANAGER:
				sequence_RecipeManager(context, (RecipeManager) semanticObject); 
				return; 
			case MyDslPackage.RECIPEBLOCK:
				sequence_Recipeblock(context, (Recipeblock) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Author returns Author
	 *
	 * Constraint:
	 *     (name=ID Email=STRING (isOwner+=[Recipe|ID] isOwner+=[Recipe|ID]*)? (writes+=Rating writes+=Rating*)? (calls+=[Recipe|ID] calls+=[Recipe|ID]*)?)
	 */
	protected void sequence_Author(ISerializationContext context, Author semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Authorblock returns Authorblock
	 *
	 * Constraint:
	 *     (authors+=Author authors+=Author*)
	 */
	protected void sequence_Authorblock(ISerializationContext context, Authorblock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FoodCategory returns FoodCategory
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_FoodCategory(ISerializationContext context, FoodCategory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOOD_CATEGORY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOOD_CATEGORY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFoodCategoryAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Ingridient returns Ingridient
	 *
	 * Constraint:
	 *     ((name=STRING amount=INT unit=Unit veganismLevel=VeganismLevel) | recipe=[Recipe|ID])
	 */
	protected void sequence_Ingridient(ISerializationContext context, Ingridient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KitchenUtensil returns KitchenUtensil
	 *
	 * Constraint:
	 *     (name=STRING | name='furnace' | name='stovetop' | name='rolling pin')
	 */
	protected void sequence_KitchenUtensil(ISerializationContext context, KitchenUtensil semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rating returns Rating
	 *
	 * Constraint:
	 *     (stars=INT comment=STRING bewertet=[Recipe|ID] writtenBy=[Author|ID])
	 */
	protected void sequence_Rating(ISerializationContext context, Rating semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RATING__STARS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RATING__STARS));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RATING__COMMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RATING__COMMENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RATING__BEWERTET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RATING__BEWERTET));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RATING__WRITTEN_BY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RATING__WRITTEN_BY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRatingAccess().getStarsINTTerminalRuleCall_3_0(), semanticObject.getStars());
		feeder.accept(grammarAccess.getRatingAccess().getCommentSTRINGTerminalRuleCall_7_0(), semanticObject.getComment());
		feeder.accept(grammarAccess.getRatingAccess().getBewertetRecipeIDTerminalRuleCall_11_0_1(), semanticObject.eGet(MyDslPackage.Literals.RATING__BEWERTET, false));
		feeder.accept(grammarAccess.getRatingAccess().getWrittenByAuthorIDTerminalRuleCall_16_0_1(), semanticObject.eGet(MyDslPackage.Literals.RATING__WRITTEN_BY, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RecipeManager returns RecipeManager
	 *
	 * Constraint:
	 *     (Authorblock=Authorblock Recipeblock=Recipeblock)
	 */
	protected void sequence_RecipeManager(ISerializationContext context, RecipeManager semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RECIPE_MANAGER__AUTHORBLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RECIPE_MANAGER__AUTHORBLOCK));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RECIPE_MANAGER__RECIPEBLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RECIPE_MANAGER__RECIPEBLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRecipeManagerAccess().getAuthorblockAuthorblockParserRuleCall_2_0(), semanticObject.getAuthorblock());
		feeder.accept(grammarAccess.getRecipeManagerAccess().getRecipeblockRecipeblockParserRuleCall_5_0(), semanticObject.getRecipeblock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Recipe returns Recipe
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         author=[Author|ID] 
	 *         vegan=VeganismLevel 
	 *         duration=INT 
	 *         difficulty=INT 
	 *         kitchenUtensils+=KitchenUtensil 
	 *         kitchenUtensils+=KitchenUtensil* 
	 *         foodCategory=FoodCategory 
	 *         ingredients+=Ingridient 
	 *         ingredients+=Ingridient*
	 *     )
	 */
	protected void sequence_Recipe(ISerializationContext context, Recipe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Recipeblock returns Recipeblock
	 *
	 * Constraint:
	 *     (recipes+=Recipe recipes+=Recipe*)
	 */
	protected void sequence_Recipeblock(ISerializationContext context, Recipeblock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
